<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
  <dict>
    <key>name</key>
    <string>L#</string>
    <key>scopeName</key>
    <string>source.zk</string>
    <key>fileTypes</key>
    <array>
      <string>zk</string>
    </array>
    <key>uuid</key>
    <string>582789B5-991D-49E1-8E39-54327B3DBDFF</string>
    <key>patterns</key>
    <array>
      <dict>
        <key>include</key>
        <string>#comment</string>
      </dict>
      <dict>
        <key>include</key>
        <string>#extension-declaration</string>
      </dict>
      <dict>
        <key>include</key>
        <string>#control-keywords</string>
      </dict>
      <dict>
        <key>include</key>
        <string>#keywords</string>
      </dict>
      <dict>
        <key>include</key>
        <string>#builtin-types</string>
      </dict>
      <dict>
        <key>include</key>
        <string>#vector-types</string>
      </dict>
      <dict>
        <key>include</key>
        <string>#inline-il</string>
      </dict>
      <dict>
        <key>include</key>
        <string>#visibility-modifiers</string>
      </dict>
      <dict>
        <key>include</key>
        <string>#attribute-declaration</string>
      </dict>
      <dict>
        <key>include</key>
        <string>#import-declaration</string>
      </dict>
      <dict>
        <key>include</key>
        <string>#namespace-declaration</string>
      </dict>
      <dict>
        <key>include</key>
        <string>#module-declaration</string>
      </dict>
      <dict>
        <key>include</key>
        <string>#function-declaration</string>
      </dict>
      <dict>
        <key>include</key>
        <string>#invoke-declaration</string>
      </dict>
      <dict>
        <key>include</key>
        <string>#type-declaration</string>
      </dict>
      <dict>
        <key>include</key>
        <string>#inherit-declarations</string>
      </dict>
      <dict>
        <key>include</key>
        <string>#keywords</string>
      </dict>
      <dict>
        <key>include</key>
        <string>#literals</string>
      </dict>
    </array>
    <key>repository</key>
    <dict>
      <key>builtin-types</key>
      <dict>
        <key>match</key>
        <string>\b(bool|let|void|float|int|object|string|function)\b</string>
        <key>captures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>keyword.type.zk</string>
          </dict>
        </dict>
      </dict>
      <key>vector-types</key>
      <dict>
        <key>match</key>
        <string>\b(f64x2|f32x4|i64x2|i32x4|i16x8|i8x16|u64x2|u32x4|u16x8|u8x16)\b</string>
        <key>captures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>keyword.type.zk</string>
          </dict>
        </dict>
      </dict>
      <key>visibility-modifiers</key>
      <dict>
        <key>name</key>
        <string>storage.modifier.zk</string>
        <key>match</key>
        <string>(?&lt;!\.)\b(abstract|async|const|extern|fixed|internal|isolated|immutable|retainable|mutable|new|override|partial|private|protected|public|readable|transient|static|unsafe|virtual|sealed)\b</string>
      </dict>
      <key>module-declaration</key>
      <dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>match</key>
            <string>\b(module)\b\s*([_[:alpha:]][_[:alnum:]]*)</string>
            <key>captures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>keyword.other.module.zk</string>
              </dict>
              <key>2</key>
              <dict>
                <key>name</key>
                <string>entity.name.type.module.zk</string>
              </dict>
            </dict>
          </dict>
        </array>
      </dict>
      <key>attribute-declaration</key>
      <dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>match</key>
            <string>(@)\s*([_[:alpha:]][_[:alnum:]]*(?:\s*\.\s*[_[:alpha:]][_[:alnum:]]*)*)</string>
            <key>captures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>markup.underline.zk</string>
              </dict>
              <key>2</key>
              <dict>
                <key>patterns</key>
                <array>
                  <dict>
                    <key>match</key>
                    <string>[_[:alpha:]][_[:alnum:]]*</string>
                    <key>name</key>
                    <string>entity.name.type.attribute.zk</string>
                  </dict>
                </array>
              </dict>
            </dict>
          </dict>
        </array>
      </dict>
      <key>inline-il</key>
      <dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>match</key>
            <string>\b(unsafe)\s+(il)\b</string>
            <key>captures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>keyword.other.unsafe.zk</string>
              </dict>
              <key>2</key>
              <dict>
                <key>name</key>
                <string>keyword.other.il.zk</string>
              </dict>
            </dict>
          </dict>
        </array>
      </dict>
      <key>import-declaration</key>
      <dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>match</key>
            <string>\b(import)\b\s*([_[:alpha:]][_[:alnum:]]*(?:\s*\.\s*[_[:alpha:]][_[:alnum:]]*)*)</string>
            <key>captures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>keyword.other.import.zk</string>
              </dict>
              <key>2</key>
              <dict>
                <key>patterns</key>
                <array>
                  <dict>
                    <key>match</key>
                    <string>[_[:alpha:]][_[:alnum:]]*</string>
                    <key>name</key>
                    <string>entity.name.type.import.zk</string>
                  </dict>
                </array>
              </dict>
            </dict>
          </dict>
          <dict>
            <key>match</key>
            <string>\b(import)\b</string>
            <key>captures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>keyword.other.import.zk</string>
              </dict>
            </dict>
          </dict>
        </array>
      </dict>
      <key>namespace-declaration</key>
      <dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>match</key>
            <string>\b(namespace)\b\s*([_[:alpha:]][_[:alnum:]]*(?:\s*\.\s*[_[:alpha:]][_[:alnum:]]*)*)</string>
            <key>captures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>keyword.other.namespace.zk</string>
              </dict>
              <key>2</key>
              <dict>
                <key>patterns</key>
                <array>
                  <dict>
                    <key>match</key>
                    <string>[_[:alpha:]][_[:alnum:]]*</string>
                    <key>name</key>
                    <string>entity.name.type.namespace.zk</string>
                  </dict>
                </array>
              </dict>
            </dict>
          </dict>
          <dict>
            <key>match</key>
            <string>\b(namespace)\b</string>
            <key>captures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>keyword.other.namespace.zk</string>
              </dict>
            </dict>
          </dict>
        </array>
      </dict>
      <key>type-declaration</key>
      <dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>match</key>
            <string>\b(class)\b\s*([_[:alpha:]][_[:alnum:]]*)</string>
            <key>captures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>keyword.other.class.zk</string>
              </dict>
              <key>2</key>
              <dict>
                <key>name</key>
                <string>entity.name.type.class.zk</string>
              </dict>
            </dict>
          </dict>
          <dict>
            <key>match</key>
            <string>\b(struct)\b\s*([_[:alpha:]][_[:alnum:]]*)</string>
            <key>captures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>keyword.other.struct.zk</string>
              </dict>
              <key>2</key>
              <dict>
                <key>name</key>
                <string>entity.name.type.struct.zk</string>
              </dict>
            </dict>
          </dict>
          <dict>
            <key>match</key>
            <string>\b(interface)\b\s*([_[:alpha:]][_[:alnum:]]*)</string>
            <key>captures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>keyword.other.interface.zk</string>
              </dict>
              <key>2</key>
              <dict>
                <key>name</key>
                <string>entity.name.type.interface.zk</string>
              </dict>
            </dict>
          </dict>
          <dict>
            <key>match</key>
            <string>\b(enum)\b\s*([_[:alpha:]][_[:alnum:]]*)</string>
            <key>captures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>keyword.other.enum.zk</string>
              </dict>
              <key>2</key>
              <dict>
                <key>name</key>
                <string>entity.name.type.enum.zk</string>
              </dict>
            </dict>
          </dict>
          <dict>
            <key>name</key>
            <string>keyword.other.union.zk</string>
            <key>match</key>
            <string>\b(union)\b</string>
          </dict>
          <dict>
            <key>name</key>
            <string>keyword.other.struct.zk</string>
            <key>match</key>
            <string>\b(struct)\b</string>
          </dict>
          <dict>
            <key>name</key>
            <string>keyword.other.class.zk</string>
            <key>match</key>
            <string>\b(class)\b</string>
          </dict>
          <dict>
            <key>name</key>
            <string>keyword.other.interface.zk</string>
            <key>match</key>
            <string>\b(interface)\b</string>
          </dict>
          <dict>
            <key>name</key>
            <string>keyword.other.enum.zk</string>
            <key>match</key>
            <string>\b(enum)\b</string>
          </dict>
        </array>
      </dict>
      <key>extension-declaration</key>
      <dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>match</key>
            <string>\b(extension)\b\s*([_[:alpha:]][_[:alnum:]]*)\s*(?:&lt;[^&gt;]*&gt;)?\s*\b(for)\b\s*([_[:alpha:]][_[:alnum:]]*)</string>
            <key>captures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>keyword.other.extension.zk</string>
              </dict>
              <key>2</key>
              <dict>
                <key>name</key>
                <string>entity.name.type.extension.zk</string>
              </dict>
              <key>3</key>
              <dict>
                <key>name</key>
                <string>keyword.other.for.zk</string>
              </dict>
              <key>4</key>
              <dict>
                <key>name</key>
                <string>entity.name.type.class.zk</string>
              </dict>
            </dict>
          </dict>
          <dict>
            <key>match</key>
            <string>\b(extension)\b</string>
            <key>captures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>keyword.other.extension.zk</string>
              </dict>
            </dict>
          </dict>
        </array>
      </dict>
      <key>inherit-declarations</key>
      <dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>match</key>
            <string>\b(extends)\b\s*([_[:alpha:]][_[:alnum:]]*)</string>
            <key>captures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>keyword.other.extends.zk</string>
              </dict>
              <key>2</key>
              <dict>
                <key>name</key>
                <string>entity.name.type.class.zk</string>
              </dict>
            </dict>
          </dict>
          <dict>
            <key>match</key>
            <string>\b(implements)\b\s*([_[:alpha:]][_[:alnum:]]*)</string>
            <key>captures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>keyword.other.implements.zk</string>
              </dict>
              <key>2</key>
              <dict>
                <key>name</key>
                <string>entity.name.type.interface.zk</string>
              </dict>
            </dict>
          </dict>
          <dict>
            <key>name</key>
            <string>keyword.other.extends.zk</string>
            <key>match</key>
            <string>\b(extends)\b</string>
          </dict>
          <dict>
            <key>name</key>
            <string>keyword.other.implements.zk</string>
            <key>match</key>
            <string>\b(implements)\b</string>
          </dict>
        </array>
      </dict>
      <key>func-declaration</key>
      <dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>match</key>
            <string>\b(func)\b\s*(operator)\b</string>
            <key>captures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>keyword.other.func.zk</string>
              </dict>
              <key>2</key>
              <dict>
                <key>name</key>
                <string>keyword.other.operator.zk</string>
              </dict>
            </dict>
          </dict>
          <dict>
            <key>match</key>
            <string>\b(func)\b\s*([_[:alpha:]][_[:alnum:]]*)</string>
            <key>captures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>keyword.other.func.zk</string>
              </dict>
              <key>2</key>
              <dict>
                <key>name</key>
                <string>entity.name.function.cs</string>
              </dict>
            </dict>
          </dict>
          <dict>
            <key>name</key>
            <string>keyword.other.func.zk</string>
            <key>match</key>
            <string>\bfunc\b</string>
          </dict>
          <dict>
            <key>name</key>
            <string>keyword.other.constructor.zk</string>
            <key>match</key>
            <string>\bconstructor\b</string>
          </dict>
        </array>
      </dict>
      <key>invoke-declaration</key>
      <dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>match</key>
            <string>([_[:alpha:]][_[:alnum:]]*)(?:\s*\()</string>
            <key>captures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>entity.name.function.cs</string>
              </dict>
            </dict>
          </dict>
        </array>
      </dict>
      <key>control-keywords</key>
      <dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>name</key>
            <string>keyword.control.conditional.if.zk</string>
            <key>match</key>
            <string>\bif\b</string>
          </dict>
          <dict>
            <key>name</key>
            <string>keyword.control.conditional.then.zk</string>
            <key>match</key>
            <string>\bthen\b</string>
          </dict>
          <dict>
            <key>name</key>
            <string>keyword.control.conditional.else.zk</string>
            <key>match</key>
            <string>\belse\b</string>
          </dict>
          <dict>
            <key>name</key>
            <string>keyword.control.loop.do.zk</string>
            <key>match</key>
            <string>\bdo\b</string>
          </dict>
          <dict>
            <key>name</key>
            <string>keyword.control.loop.while.zk</string>
            <key>match</key>
            <string>\bwhile\b</string>
          </dict>
          <dict>
            <key>name</key>
            <string>keyword.control.loop.for.zk</string>
            <key>match</key>
            <string>\bfor\b</string>
          </dict>
          <dict>
            <key>name</key>
            <string>keyword.control.try.zk</string>
            <key>match</key>
            <string>\btry\b</string>
          </dict>
          <dict>
            <key>name</key>
            <string>keyword.control.catch.zk</string>
            <key>match</key>
            <string>\bcatch\b</string>
          </dict>
          <dict>
            <key>name</key>
            <string>keyword.control.flow.yield.zk</string>
            <key>match</key>
            <string>\byield\b</string>
          </dict>
          <dict>
            <key>name</key>
            <string>keyword.control.flow.return.zk</string>
            <key>match</key>
            <string>\breturn\b</string>
          </dict>
          <dict>
            <key>name</key>
            <string>keyword.control.flow.break.zk</string>
            <key>match</key>
            <string>\bbreak\b</string>
          </dict>
          <dict>
            <key>name</key>
            <string>keyword.control.flow.continue.zk</string>
            <key>match</key>
            <string>\bcontinue\b</string>
          </dict>
          <dict>
            <key>name</key>
            <string>keyword.control.flow.throw.zk</string>
            <key>match</key>
            <string>\bthrow\b</string>
          </dict>
          <dict>
            <key>name</key>
            <string>keyword.control.flow.abort.zk</string>
            <key>match</key>
            <string>\babort\b</string>
          </dict>
          <dict>
            <key>name</key>
            <string>keyword.control.flow.switch.zk</string>
            <key>match</key>
            <string>\bswitch\b</string>
          </dict>
          <dict>
            <key>name</key>
            <string>keyword.control.flow.case.zk</string>
            <key>match</key>
            <string>\bcase\b</string>
          </dict>
          <dict>
            <key>name</key>
            <string>keyword.control.flow.with.zk</string>
            <key>match</key>
            <string>\bwith\b</string>
          </dict>
          <dict>
            <key>name</key>
            <string>constant.language.boolean.true.zk</string>
            <key>match</key>
            <string>\btrue\b</string>
          </dict>
          <dict>
            <key>name</key>
            <string>constant.language.boolean.false.zk</string>
            <key>match</key>
            <string>\bfalse\b</string>
          </dict>
          <dict>
            <key>name</key>
            <string>constant.language.class.null.zk</string>
            <key>match</key>
            <string>\bnull\b</string>
          </dict>
        </array>
      </dict>
      <key>keywords</key>
      <dict>
        <key>name</key>
        <string>keyword.type.zk</string>
        <key>match</key>
        <string>\b(alias|as|await|base|default|fatal|get|is|has|let|match|operator|implicit|out|params|ref|in|requires|set|sizeof|this|throws|typeof|value|var|where)\b</string>
      </dict>
      <key>comment</key>
      <dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>name</key>
            <string>comment.block.zk</string>
            <key>begin</key>
            <string>/\*</string>
            <key>beginCaptures</key>
            <dict>
              <key>0</key>
              <dict>
                <key>name</key>
                <string>punctuation.definition.comment.zk</string>
              </dict>
            </dict>
            <key>end</key>
            <string>\*/</string>
            <key>endCaptures</key>
            <dict>
              <key>0</key>
              <dict>
                <key>name</key>
                <string>punctuation.definition.comment.zk</string>
              </dict>
            </dict>
          </dict>
          <dict>
            <key>begin</key>
            <string>(^\s+)?(?=//)</string>
            <key>beginCaptures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>punctuation.whitespace.comment.leading.zk</string>
              </dict>
            </dict>
            <key>end</key>
            <string>(?=$)</string>
            <key>patterns</key>
            <array>
              <dict>
                <key>name</key>
                <string>comment.block.documentation.zk</string>
                <key>begin</key>
                <string>(?&lt;!/)///(?!/)</string>
                <key>beginCaptures</key>
                <dict>
                  <key>0</key>
                  <dict>
                    <key>name</key>
                    <string>punctuation.definition.comment.zk</string>
                  </dict>
                </dict>
                <key>end</key>
                <string>(?=$)</string>
              </dict>
              <dict>
                <key>name</key>
                <string>comment.line.double-slash.zk</string>
                <key>begin</key>
                <string>(?&lt;!/)//(?!/)</string>
                <key>beginCaptures</key>
                <dict>
                  <key>0</key>
                  <dict>
                    <key>name</key>
                    <string>punctuation.definition.comment.zk</string>
                  </dict>
                </dict>
                <key>end</key>
                <string>(?=$)</string>
              </dict>
            </array>
          </dict>
        </array>
      </dict>
      <key>literals</key>
      <dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#numeric-literal</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#char-literal</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#string-literal</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#verbatim-string-literal</string>
          </dict>
        </array>
      </dict>
      <key>numeric-literal</key>
      <dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>name</key>
            <string>constant.numeric.hex.zk</string>
            <key>match</key>
            <string>\b0(x|X)[0-9a-fA-F_]+(i8|i16|i32|i64|u8|u16|u32|u64)?\b</string>
          </dict>
          <dict>
            <key>name</key>
            <string>constant.numeric.binary.zk</string>
            <key>match</key>
            <string>\b0(b|B)[01_]+(i8|i16|i32|i64|u8|u16|u32|u64)?\b</string>
          </dict>
          <dict>
            <key>name</key>
            <string>constant.numeric.decimal.zk</string>
            <key>match</key>
            <string>\b([0-9_]+)?\.[0-9_]+((e|E)[0-9]+)?(f32|64)?\b</string>
          </dict>
          <dict>
            <key>name</key>
            <string>constant.numeric.decimal.zk</string>
            <key>match</key>
            <string>\b[0-9_]+(e|E)[0-9_]+(f32|f64)?\b</string>
          </dict>
          <dict>
            <key>name</key>
            <string>constant.numeric.decimal.zk</string>
            <key>match</key>
            <string>\b[0-9_]+(f32|f64)\b</string>
          </dict>
          <dict>
            <key>name</key>
            <string>constant.numeric.decimal.zk</string>
            <key>match</key>
            <string>\b[0-9_]+(i8|i16|i32|i64|u8|u16|u32|u64)?\b</string>
          </dict>
        </array>
      </dict>
      <key>char-literal</key>
      <dict>
        <key>name</key>
        <string>string.quoted.single.zk</string>
        <key>begin</key>
        <string>'</string>
        <key>beginCaptures</key>
        <dict>
          <key>0</key>
          <dict>
            <key>name</key>
            <string>punctuation.definition.char.begin.zk</string>
          </dict>
        </dict>
        <key>end</key>
        <string>(\')|((?:[^\\\n])$)</string>
        <key>endCaptures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>punctuation.definition.char.end.zk</string>
          </dict>
          <key>2</key>
          <dict>
            <key>name</key>
            <string>invalid.illegal.newline.zk</string>
          </dict>
        </dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#string-character-escape</string>
          </dict>
        </array>
      </dict>
      <key>string-character-escape</key>
      <dict>
        <key>name</key>
        <string>constant.character.escape.zk</string>
        <key>match</key>
        <string>\\.</string>
      </dict>
      <key>string-literal</key>
      <dict>
        <key>name</key>
        <string>string.quoted.double.zk</string>
        <key>begin</key>
        <string>(?&lt;!\\)"</string>
        <key>beginCaptures</key>
        <dict>
          <key>0</key>
          <dict>
            <key>name</key>
            <string>punctuation.definition.string.begin.zk</string>
          </dict>
        </dict>
        <key>end</key>
        <string>(")|((?:[^\\\n])$)</string>
        <key>endCaptures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>punctuation.definition.string.end.zk</string>
          </dict>
          <key>2</key>
          <dict>
            <key>name</key>
            <string>invalid.illegal.newline.zk</string>
          </dict>
        </dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#string-character-escape</string>
          </dict>
        </array>
      </dict>
      <key>verbatim-string-character-escape</key>
      <dict>
        <key>name</key>
        <string>constant.character.escape.zk</string>
        <key>match</key>
        <string>""</string>
      </dict>
      <key>verbatim-string-literal</key>
      <dict>
        <key>name</key>
        <string>string.quoted.double.zk</string>
        <key>begin</key>
        <string>\\"</string>
        <key>beginCaptures</key>
        <dict>
          <key>0</key>
          <dict>
            <key>name</key>
            <string>punctuation.definition.string.begin.zk</string>
          </dict>
        </dict>
        <key>end</key>
        <string>"</string>
        <key>endCaptures</key>
        <dict>
          <key>0</key>
          <dict>
            <key>name</key>
            <string>punctuation.definition.string.end.zk</string>
          </dict>
        </dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#verbatim-string-character-escape</string>
          </dict>
        </array>
      </dict>
    </dict>
  </dict>
</plist>